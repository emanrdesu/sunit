#!/usr/bin/sidef

#`(if running under some shell) {
    eval 'exec /usr/bin/sidef $0 ${1+"$@"}'
}

# Author: Daniel "Trizen" È˜uteu
# License: GPLv3
# Date: 17 May 2014
# Website: https://github.com/trizen/smart-units
# Code originaly written for betty (https://github.com/trizen/betty/blob/dev/lib/units.rb)

#
## Requires Sidef: https://github.com/trizen/sidef
#

func help {
    print <<"USAGE";
usage: #{File.new(__FILE__).basename} [text]

examples:
    144 F to C
    convert 10kg into pounds
    whats the equivalent of 21 inches in meters
    what is the speed of light in miles per hour
USAGE
    Sys.exit(0);
}

func more_help {
    print <<"HELP";
Mass:
    42 kg to lbs        : convert kilograms to pounds
    30 t to grams       : convert tonnes to grams
    10 lbs to quintals  : convert pounds to quintals

Temperature:
    120 F to C          : convert fahrenheit to celsius
    -15 C to K          : convert celsius to kelvin
    420 K to F          : convert kelvin to fahrenheit

Length:
    21.1 in to cm       : convert inches to centimetres
    5.6 feet to m       : convert feet to meters
    4 light years to km : convert light years to km

Velocity:
    4444 mph to km/s        : convert miles per hour to km/s
    50 m/s to km/h          : convert meters per second to km/h
    speed of sound in mi/s  : convert the speed of sound in mi/s

Time:
    2 hours in sec      : convert hours to seconds
    3 years in mons     : convert years to mons
    4 days in hours     : convert days to hours

Information:
    one byte to bits    : convert bytes to bits
    32MB in KB          : convert megabytes in kilobytes
    3 TB in GB          : convert terabytes in gigabytes

...and more that are left for you to discover!
HELP

}

func convert(amount, from, to) {
      var precision_f = '%.2f';            # this should be a config option

      var conversions = :(
        :mass => :(  # all relative to 1 kilogram
            :grams     => :(:re => /^(?:grams?|gr)$/i,         :factor => 1000.0),
            :quintals  => :(:re => /^(?:quintals?)$/i,         :factor => 0.01),
            :tonnes    => :(:re => /^(?:tonn?es?|(?-i:t))$/i,  :factor => 0.001),
            :kilograms => :(:re => /^(?:kg|kilograms?)$/i,     :factor => 1.0),
            :pounds    => :(:re => /^(?:pounds?|lbs)$/i,       :factor => 1.0 / 0.45359237),
        ),
        :temperature => :(   # using celsius as the standard
            :celsius    => :(:re => /^(?:celsius|(?-i:C))$/i,    :code => {|n, _| n} ),
            :kelvin     => :(:re => /^(?:kelvin|(?-i:K))$/i,     :code => {|n, to| to ? (n + 273.15) : (-273.15 + n)} ),
            :fahrenheit => :(:re => /^(?:fahrenheit|(?-i:F))$/i, :code => {|n, to| to ? (32.0 + n*9.0/5.0) : ((n - 32.0) * 5.0/9.0)} ),
        ),
        :time => :(  # all relative to 1 second
            :nanoseconds  => :(:re => /^(?:nanosec(?:ond)?s?|(?-i:ns))/i,       :factor => 1.0e9),
            :microseconds => :(:re => /^(?:microsec(?:ond)?s?|(?-i:us))/i,      :factor => 1.0e6),
            :milliseconds => :(:re => /^(?:mill?isec(?:ond)?s?|(?-i:ms))$/i,    :factor => 1.0e3),
            :seconds      => :(:re => /^(?:sec(?:ond)?s?|(?-i:s))$/i,           :factor => 1.0),
            :minutes      => :(:re => /^(?:min(?:ute)?s?)$/i,                   :factor => 1.0 / 60.0),
            :moments      => :(:re => /^(?:mom(?:ent)?s?)$/i,                   :factor => 1.0 / 90.0),
            :hours        => :(:re => /^(?:hours?)$/i,                          :factor => 1.0 / 3600.0),
            :days         => :(:re => /^(?:days?)$/i,                           :factor => 1.0 / 86400.0),
            :millidays    => :(:re => /^(?:millidays?|(?-i:md))$/i,             :factor => 1.0 / 86.4),
            :weeks        => :(:re => /^(?:weeks?)$/i,                          :factor => 1.0 / 604800.0),
            :months       => :(:re => /^(?:mon(?:th)?s?)$/i,                    :factor => 1.0 / 2.62974e6),
            :years        => :(:re => /^(?:years?)$/i,                          :factor => 1.0 / 31556952.0),
        ),
        :velocity    => :( # all relative to 1 meter / second
            :meters_per_second     => :(:re => /^(?:m(?:et(?:er|re)s?)?\/s(?:ec)?|m(?:et(?:er|re)s?)?\s+per\s+sec(?:ond)?)$/i,      :factor => 1.0,),
            :miles_per_hour        => :(:re => /^(?:mph|mi(?:les?)?\/h|mi(?:les?)?\s+per\s+hour)$/i,                                :factor => 1.0 / 0.44704),
            :miles_per_minute      => :(:re => /^(?:mpm|mi(?:les?)?\/min|mi(?:les?)?\s+per\s+min(?:ute)?)$/i,                       :factor => 1.0 / 26.8224),
            :miles_per_second      => :(:re => /^(?:mps|mi(?:les?)?\/s(?:ec)?|mi(?:les?)?\s+per\s+sec(?:ond)?)$/i,                  :factor => 1.0 / 1609.344),
            :kilometers_per_hour   => :(:re => /^(?:kph|km[\/p]h|(?:kilomet(?:er|re)s|km)\s+per\s+hour)$/i,                         :factor => 3.6),
            :metres_per_hour       => :(:re => /^(?:m(?:eters?)?\/h|(?:metres?|m)\s+per\s+hour)$/i,                                 :factor => 3600.0),
            :kilometers_per_second => :(:re => /^(?:kph|km\/s(?:ec)?|(?:kilomet(?:er|re)s|km)\s+per\s+sec(?:ond)?)$/i,              :factor => 0.001),
            :speed_of_light        => :(:re => /^(?:speed\s+of\s+light|(?-i:c))$/i,                                                 :factor => 1.0 / 299792458.0),
            :speed_of_sound        => :(:re => /^(?:speed\s+of\s+sound)$/i,                                                         :factor => 1.0 / 340.29),
        ),
        :length      => :(   # all relative to 1 meter
            :kilometers       => :(:re => /^(?:kilomet(?:er|re)s?|km)$/i,       :factor => 0.001),
            :meters           => :(:re => /^(?:met(?:er|re)s?|(?-i:m))$/i,      :factor => 1.0),
            :centimetres      => :(:re => /^(?:centimet(?:er|re)s?|cm)$/i,      :factor => 100),
            :millimetres      => :(:re => /^(?:millimet(?:er|re)s?|mm)$/i,      :factor => 1000),
            :micrometres      => :(:re => /^(?:micromet(?:er|re)s?|um)$/i,      :factor => 10.0**6.0),
            :nanometres       => :(:re => /^(?:nanomet(?:er|re)s?|nm)$/i,       :factor => 10.0**9.0),
            :picometres       => :(:re => /^(?:picomet(?:er|re)s?|pm)$/i,       :factor => 10.0**12.0),
            :femtometres      => :(:re => /^(?:femtomet(?:er|re)s?|fm)$/i,      :factor => 10.0**15.0),
            :feet             => :(:re => /^(?:feet|ft|foot)$/i,                :factor => 1.0 / 0.304799735),
            :inches           => :(:re => /^(?:inch(?:es)?|in|")$/i,            :factor => 1.0 / 0.0254),
            :miles            => :(:re => /^(?:miles?|mi)$/i,                   :factor => 1.0 / 1609.344),
            :yards            => :(:re => /^(?:yards?|yd)$/i,                   :factor => 1.0 / 0.9144),
            :astronomic_units => :(:re => /^(?:astronomic[-\s]*units?|AU)$/i,   :factor => 1.0 / 149597870700.0),
            :light_seconds    => :(:re => /^(?:light[-\s]*sec(?:ond)?s?|ls)$/i, :factor => 1.0 / 299792458.0),
            :light_minutes    => :(:re => /^(?:light[-\s]*min(?:ute)?s?|lm)$/i, :factor => 1.0 /     1.798754748e10),
            :light_hours      => :(:re => /^(?:light[-\s]*hours?|lh)$/i,        :factor => 1.0 /    1.0792528488e12),
            :light_days       => :(:re => /^(?:light[-\s]*days?|ld)$/i,         :factor => 1.0 /   2.59020683712e13),
            :light_years      => :(:re => /^(?:light[-\s]*years?|LY)$/i,        :factor => 1.0 / 9.4607304725808e15),
        ),
        :information   => :( # all relative to 1 byte
            :bits           => :(:re => /^(?:bits?)$/i,            :factor => 8.0),
            :bytes          => :(:re => /^(?:bytes?)$/i,           :factor => 1.0),
            :kilobytes      => :(:re => /^(?:kilobytes?|ki?b)$/i,  :factor => 1.0 / (1024.0 ** 1.0)),
            :megabytes      => :(:re => /^(?:megabytes?|mi?b)$/i,  :factor => 1.0 / (1024.0 ** 2.0)),
            :gigabytes      => :(:re => /^(?:gigabytes?|gi?b)$/i,  :factor => 1.0 / (1024.0 ** 3.0)),
            :terabytes      => :(:re => /^(?:terabytes?|ti?b)$/i,  :factor => 1.0 / (1024.0 ** 4.0)),
            :petabytes      => :(:re => /^(?:petabytes?|pi?b)$/i,  :factor => 1.0 / (1024.0 ** 5.0)),
            :exabytes       => :(:re => /^(?:exabytes?|ei?b)$/i,   :factor => 1.0 / (1024.0 ** 6.0)),
            :zettabytes     => :(:re => /^(?:zettabytes?|zi?b)$/i, :factor => 1.0 / (1024.0 ** 7.0)),
            :yottabytes     => :(:re => /^(?:yottabytes?|yi?b)$/i, :factor => 1.0 / (1024.0 ** 8.0)),
        ),
    )

    conversions.each{ |category, value|
        value.each{ |from_unit, from_data|
            if (from.match(from_data[:re])) {
                value.each{ |_, to_data|
                    if (to.match(to_data[:re])) {
                        var new_amount = 0.0;
                        if (category == :temperature) {
                            var std_from = from_data[:code].call(amount, false);
                            new_amount   = to_data[:code].call(std_from, true);
                        } else {
                            new_amount = (amount * to_data[:factor] / from_data[:factor]);
                        };
                        say (new_amount.is_int ? new_amount : precision_f%new_amount);
                        return true;
                    }
                };
                STDERR.say("#{category}: I don't know how to convert #{from_unit.gsub('_', ' ')} to #{to}...");
                return false;
            }
        }
    }

    STDERR.say("I don't know how to convert #{from} to #{to}... Is even '#{from}' a real unit?");
    return false;
}

func main(command) {
    var match = command.match(/^
        # command or question
        (?:(?:convert|how\s+much\s+is|what(?:\s+is|\W*s)(?:\s+the)?(?:\s+equivalent\s+of)?)\s+)?

        # followed by a number or 'a' word or nothing
        ([-+]?\d+(?:\.\d+)?|(?:an?|one)(?=\s)|)

        # unit from (up to 3 words)
        \s*(\S+(?:\s+\S+){0,2})

        # 'to' token
        \s+(?:in|to|into)\s+

        # unit to (up to 3 words)
        (\S+(?:\s+\S+){0,2})
    $/ix);

    if (match) {
        var (amount, from, to) = match.cap[0..2]...;

        if (amount ~~ ['a','an','one','']) {
            amount = 1.0;
        } else {
            amount.to_f!;
        }

        return convert(amount, from, to);
    }
    else {
        more_help();
    }

    return false;
}

Sys.exit((ARGV.is_empty ? help() : main(ARGV.join(' '))) ? 0 : 1);
